{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,S,aAIA,MAAMC,EAAQC,SAASC,cAAc,oBAC/BC,EAAWF,SAASC,cAAc,gBACxCC,EAASC,UAAW,EACpB,MAAMC,EAAQJ,SAASC,cAAc,eAC/BI,EAASL,SAASC,cAAc,gBAChCK,EAAWN,SAASC,cAAc,kBAClCM,EAAWP,SAASC,cAAc,kBACxC,IAAIO,EAEJ,MAAMC,EAAU,CACdC,YAAY,EACZC,WAAW,EACXC,YAAa,IAAIC,KACjBC,gBAAiB,EACjBC,QAAQC,GACNR,EAAoBQ,EAAc,GAAGC,UACjCT,EAAoBK,KAAKK,MAC3BC,EAAAC,OAAOC,QAAQ,qCAAsC,CACnDC,SAAU,gBAIdpB,EAASC,UAAW,EAoBtBoB,EAAgBC,EAAMC,UAAU,IAChCD,EAAME,O,GATR,SAASH,GAAgBI,KAAEA,EAAIC,MAAEA,EAAKC,QAAEA,EAAOC,QAAEA,IAC/C1B,EAAM2B,YAAc,GAAGJ,IACvBtB,EAAO0B,YAAc,GAAGH,IACxBtB,EAASyB,YAAc,GAAGF,IAC1BtB,EAASwB,YAAc,GAAGD,G,EAZ5B,EAAAjC,EAAAmC,SAAU,mBAAoBvB,GAE9BP,EAAS+B,iBAAiB,SAAS,KACjClC,EAAMI,UAAW,EACjBD,EAASC,UAAW,EACpBqB,EAAMU,OAAO,IAqEf,MAAMV,EAAQ,IAtDd,MAMEU,QACEC,KAAKC,WAAaC,aAAY,KAC5B,MAAMC,EAAczB,KAAKK,MACzB,GAAIoB,GAAe9B,EAOjB,OANA2B,KAAKT,OACL3B,EAAMI,UAAW,EACjBD,EAASC,UAAW,OACpBgB,EAAAC,OAAOmB,KAAK,aAAc,CACxBjB,SAAU,eAId,IAAIkB,EAAYhC,EAAoB8B,EACpC,MAAMG,EAAON,KAAKV,UAAUe,GAC5BL,KAAKO,OAAOD,GACZE,QAAQC,IAAI,WAAW,GACtB,I,CAGLlB,OACEmB,cAAcV,KAAKC,YACnBO,QAAQC,IAAI,Y,CAGdnB,UAAUqB,GAER,MACMC,EAASC,IACTC,EAAOF,KACPG,EAAa,GAAPD,EAWZ,MAAO,C,KATMd,KAAKgB,eAAeC,KAAKC,MAAMP,EAAKI,I,MACnCf,KAAKgB,eAAeC,KAAKC,MAAMP,EAAMI,EAAOD,I,QAC1Cd,KAAKgB,eACnBC,KAAKC,MAAMP,EAAOI,EAAOD,EAAQF,I,QAEnBZ,KAAKgB,eACnBC,KAAKC,MAAMP,EAAQI,EAAOD,EAAQF,EAXrB,M,CAiBjBI,eAAeG,GACb,OAAOC,OAAOD,GAAOE,SAAS,EAAG,I,CAjDnCC,aAAYf,OAAEA,IACZP,KAAKC,WAAa,KAClBD,KAAKO,OAASA,C,GAmDM,CAAEA,OAAQnB","sources":["src/js/02-timer-class.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst input = document.querySelector('#datetime-picker');\nconst startBtn = document.querySelector('[data-start]');\nstartBtn.disabled = true;\nconst days1 = document.querySelector('[data-days]');\nconst hours1 = document.querySelector('[data-hours]');\nconst minutes1 = document.querySelector('[data-minutes]');\nconst seconds1 = document.querySelector('[data-seconds]');\nlet userselectedDates;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userselectedDates = selectedDates[0].getTime();\n    if (userselectedDates < Date.now()) {\n      Notify.failure('Please choose a date in the future', {\n        position: 'center-top',\n      });\n      return;\n    }\n    startBtn.disabled = false;\n    clearClockFace();\n  },\n};\nflatpickr('#datetime-picker', options);\n\nstartBtn.addEventListener('click', () => {\n  input.disabled = true;\n  startBtn.disabled = true;\n  timer.start();\n});\n\nfunction updateClockFace({ days, hours, minutes, seconds }) {\n  days1.textContent = `${days}`;\n  hours1.textContent = `${hours}`;\n  minutes1.textContent = `${minutes}`;\n  seconds1.textContent = `${seconds}`;\n}\n\nfunction clearClockFace() {\n  updateClockFace(timer.convertMs(0));\n  timer.stop();\n}\n\nclass Timer {\n  constructor({ onTick }) {\n    this.intervalId = null;\n    this.onTick = onTick;\n  }\n\n  start() {\n    this.intervalId = setInterval(() => {\n      const currentTime = Date.now();\n      if (currentTime >= userselectedDates) {\n        this.stop();\n        input.disabled = false;\n        startBtn.disabled = true;\n        Notify.info('Time is up', {\n          position: 'center-top',\n        });\n        return;\n      }\n      let deltaTime = userselectedDates - currentTime;\n      const time = this.convertMs(deltaTime);\n      this.onTick(time);\n      console.log('timer on');\n    }, 1000);\n  }\n\n  stop() {\n    clearInterval(this.intervalId);\n    console.log('timer off');\n  }\n\n  convertMs(ms) {\n    // Number of milliseconds per unit of time\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    const days = this.addLeadingZero(Math.floor(ms / day));\n    const hours = this.addLeadingZero(Math.floor((ms % day) / hour));\n    const minutes = this.addLeadingZero(\n      Math.floor(((ms % day) % hour) / minute)\n    );\n    const seconds = this.addLeadingZero(\n      Math.floor((((ms % day) % hour) % minute) / second)\n    );\n\n    return { days, hours, minutes, seconds };\n  }\n\n  addLeadingZero(value) {\n    return String(value).padStart(2, '0');\n  }\n}\n\nconst timer = new Timer({ onTick: updateClockFace });\n\n// class Timer {\n//   constructor(start, end, userTime, id) {\n//   }\n// }\n"],"names":["$fbklV","parcelRequire","$ef3a96eaf8fde3fa$var$input","document","querySelector","$ef3a96eaf8fde3fa$var$startBtn","disabled","$ef3a96eaf8fde3fa$var$days1","$ef3a96eaf8fde3fa$var$hours1","$ef3a96eaf8fde3fa$var$minutes1","$ef3a96eaf8fde3fa$var$seconds1","$ef3a96eaf8fde3fa$var$userselectedDates","$ef3a96eaf8fde3fa$var$options","enableTime","time_24hr","defaultDate","Date","minuteIncrement","onClose","selectedDates","getTime","now","$iQIUW","Notify","failure","position","$ef3a96eaf8fde3fa$var$updateClockFace","$ef3a96eaf8fde3fa$var$timer","convertMs","stop","days","hours","minutes","seconds","textContent","default","addEventListener","start","this","intervalId","setInterval","currentTime","info","deltaTime","time","onTick","console","log","clearInterval","ms","minute","second","hour","day","addLeadingZero","Math","floor","value","String","padStart","constructor"],"version":3,"file":"02-timer-class.fc792394.js.map"}